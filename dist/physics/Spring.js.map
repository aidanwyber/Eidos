{"version":3,"file":"Spring.js","sourceRoot":"","sources":["../../src/physics/Spring.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,MAAM;IAClB,CAAC,CAAW;IACZ,CAAC,CAAW;IACZ,UAAU,CAAS;IACnB,CAAC,CAAS,CAAC,kBAAkB;IAE7B,OAAO,GAAW,IAAI,CAAC;IAEvB,MAAM,CAAC,OAAO,GAAW,IAAI,CAAC;IAE9B,YAAY,CAAW,EAAE,CAAW,EAAE,UAAkB,EAAE,CAAS;QAClE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,UAAU,GAAG,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;QACrE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAEX,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC;IAED,KAAK;QACJ,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QACxC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YACnC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC7C,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACpC,CAAC;IACF,CAAC","sourcesContent":["import type { Particle } from './Particle';\r\n\r\nexport class Spring {\r\n\ta: Particle;\r\n\tb: Particle;\r\n\trestLength: number;\r\n\tk: number; // Spring constant\r\n\r\n\tdamping: number = 0.05;\r\n\r\n\tstatic epsilon: number = 1e-2;\r\n\r\n\tconstructor(a: Particle, b: Particle, restLength: number, k: number) {\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.restLength = restLength === null ? a.distanceTo(b) : restLength;\r\n\t\tthis.k = k;\r\n\r\n\t\ta.addSpring(this);\r\n\t\tb.addSpring(this);\r\n\t}\r\n\r\n\tapply() {\r\n\t\tconst diff = this.b.sub(this.a);\r\n\t\tconst dx = diff.mag() - this.restLength;\r\n\t\tif (Math.abs(dx) > Spring.epsilon) {\r\n\t\t\tconst force = diff.normalizeTo(this.k * -dx);\r\n\t\t\tthis.a.addForce(force.scale(-0.5));\r\n\t\t\tthis.b.addForce(force.scale(+0.5));\r\n\t\t}\r\n\t}\r\n\r\n\t// draw() {\r\n\t// \tconst n = Math.floor(this.b.distanceTo(this.a) * 0.2);\r\n\t// \tconst delta = this.b.sub(this.a).div(n);\r\n\t// \tconst deltaPerp = delta.perp();\r\n\t// \tconst zig = delta.rotate(Math.PI / 4).scale(Math.SQRT2 / 2);\r\n\t// \tbeginShape();\r\n\t// \tvertex(this.a.x, this.a.y);\r\n\t// \tfor (let i = 1; i <= n; i++) {\r\n\t// \t\tconst zigPos = this.a\r\n\t// \t\t\t.add(delta.scale(i - 0.5))\r\n\t// \t\t\t.add(deltaPerp.scale(i % 2 === 0 ? 1 : -1));\r\n\t// \t\tconst nextPos = this.a.add(delta.scale(i));\r\n\t// \t\tvertex(zigPos.x, zigPos.y);\r\n\t// \t\tvertex(nextPos.x, nextPos.y);\r\n\t// \t}\r\n\t// \tendShape();\r\n\t// \t// line(this.a.x, this.a.y, this.b.x, this.b.y);\r\n\t// }\r\n}\r\n"]}